Metadata-Version: 2.1
Name: daycoval-api
Version: 2.0.0
Summary: Sistema limpo e modular para API Daycoval - Relat√≥rios automatizados
Home-page: https://github.com/catalise/daycoval-api
Author: Catalise Analytics
Author-email: dev@catalise.com.br
License: UNKNOWN
Project-URL: Bug Tracker, https://github.com/catalise/daycoval-api/issues
Project-URL: Documentation, https://github.com/catalise/daycoval-api/wiki
Keywords: daycoval,api,financial,reports,automation,portfolios,funds
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Financial and Insurance Industry
Classifier: Topic :: Office/Business :: Financial
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Operating System :: OS Independent
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Provides-Extra: dev
Provides-Extra: docs
Provides-Extra: test

# Sistema Unificado de Relat√≥rios Daycoval

Sistema completo para gera√ß√£o automatizada de relat√≥rios da API Daycoval, com suporte a m√∫ltiplos endpoints e processamento em lote.

## üìã √çndice

- [Vis√£o Geral](#vis√£o-geral)
- [Instala√ß√£o e Configura√ß√£o](#instala√ß√£o-e-configura√ß√£o)
- [Relat√≥rios Dispon√≠veis](#relat√≥rios-dispon√≠veis)
- [Guia de Uso](#guia-de-uso)
- [Par√¢metros Avan√ßados](#par√¢metros-avan√ßados)
- [Exemplos Pr√°ticos](#exemplos-pr√°ticos)
- [Solu√ß√£o de Problemas](#solu√ß√£o-de-problemas)

## üéØ Vis√£o Geral

Este sistema permite gerar tr√™s tipos principais de relat√≥rios da API Daycoval:

| Endpoint | Tipo de Relat√≥rio | Descri√ß√£o |
|----------|-------------------|-----------|
| **32** | **Carteira Di√°ria** | Relat√≥rios de posi√ß√£o da carteira em uma data espec√≠fica |
| **45** | **Posi√ß√£o de Cotistas** | Relat√≥rios detalhados dos cotistas por fundo |
| **1048** | **Rentabilidade Sint√©tica** | Relat√≥rios de rentabilidade sint√©tica com base di√°ria opcional |

### ‚ú® Principais Funcionalidades

- ‚úÖ **Processamento Individual ou em Lote** (1 fundo ou todos os 95 fundos)
- ‚úÖ **Rate Limiting Autom√°tico** (evita sobrecarga na API)
- ‚úÖ **Retry Inteligente** (reprocessa falhas automaticamente)
- ‚úÖ **M√∫ltiplos Formatos** (PDF, CSV, TXT, JSON)
- ‚úÖ **Configura√ß√£o Flex√≠vel** (defaults inteligentes + customiza√ß√£o)
- ‚úÖ **Logs Detalhados** (rastreamento completo do processo)

## üöÄ Instala√ß√£o e Configura√ß√£o

### 1. Configura√ß√£o Inicial

```bash
# Execute o script de configura√ß√£o
python setup.py

# Isso ir√°:
# - Verificar depend√™ncias
# - Criar diret√≥rios necess√°rios
# - Validar arquivo de configura√ß√£o
# - Testar conectividade com API
```

### 2. Estrutura de Arquivos

```
daycoval/
‚îú‚îÄ‚îÄ api.py                    # M√≥dulo principal da API
‚îú‚îÄ‚îÄ batch_processor.py        # Processamento em lote
‚îú‚îÄ‚îÄ quoteholder_reports.py    # M√≥dulo para relat√≥rios de cotistas
‚îú‚îÄ‚îÄ cli.py                   # Interface de linha de comando
‚îú‚îÄ‚îÄ portfolios.json          # Configura√ß√£o dos fundos
‚îú‚îÄ‚îÄ utils/
‚îÇ   ‚îî‚îÄ‚îÄ logging_utils.py     # Sistema de logs
‚îî‚îÄ‚îÄ reports/                 # Diret√≥rio de sa√≠da (criado automaticamente)
```

### 3. Arquivo de Configura√ß√£o

O arquivo `portfolios.json` cont√©m:
- **95 fundos mapeados** (ID ‚Üí Nome)
- **Configura√ß√µes padr√£o** para relat√≥rios de cotistas
- **Configura√ß√µes de rate limiting**

## üìä Relat√≥rios Dispon√≠veis

### üè¶ Relat√≥rio de Carteira Di√°ria (Endpoint 32)

**O que cont√©m:**
- Posi√ß√µes dos ativos na carteira
- Valores de mercado
- Rentabilidade
- Composi√ß√£o da carteira

**Quando usar:**
- Relat√≥rios di√°rios de posi√ß√£o
- Acompanhamento de performance
- An√°lise de composi√ß√£o de portf√≥lio

### üë• Relat√≥rio de Posi√ß√£o de Cotistas (Endpoint 45)

**O que cont√©m:**
- Lista detalhada de cotistas
- Quantidade de cotas por investidor
- Informa√ß√µes de assessores
- Classifica√ß√£o por tipo de investidor

**Quando usar:**
- Controle de base de cotistas
- Relat√≥rios regulamentares
- An√°lise de distribui√ß√£o

### üìà Relat√≥rio de Rentabilidade Sint√©tica (Endpoint 1048)

**O que cont√©m:**
- An√°lise de rentabilidade sint√©tica
- Compara√ß√£o com √≠ndices de refer√™ncia
- M√©tricas de performance ajustadas
- Dados hist√≥ricos de rentabilidade

**Quando usar:**
- An√°lise de performance de fundos
- Compara√ß√£o de rentabilidade
- Relat√≥rios de gest√£o
- Acompanhamento de indicadores

## üìñ Guia de Uso

### Sintaxe B√°sica

```bash
python cli.py [op√ß√µes_globais] [tipo_relat√≥rio] [modo] [par√¢metros]
```

**Componentes:**
- **Op√ß√µes globais**: `--format`, `--output-dir`, `--verbose`
- **Tipo de relat√≥rio**: `daily`, `quoteholder` ou `profitability`
- **Modo**: `single` (1 fundo) ou `batch` (m√∫ltiplos fundos)
- **Par√¢metros**: Espec√≠ficos de cada tipo de relat√≥rio

### üè¶ Relat√≥rios de Carteira Di√°ria

#### Um Fundo Espec√≠fico
```bash
# Formato PDF (padr√£o)
python cli.py daily single --portfolio 4471709 --date 2025-07-31

# Formato CSV Brasileiro
python cli.py --format CSVBR daily single --portfolio 4471709 --date 2025-07-31

# Com preview das primeiras linhas (apenas texto)
python cli.py daily single --portfolio 4471709 --date 2025-07-31 --preview
```

#### Todos os Fundos (Lote)
```bash
# Todos os 95 fundos em PDF
python cli.py daily batch --all-portfolios --date 2025-07-31

# Fundos espec√≠ficos
python cli.py daily batch --portfolio-list "4471709,8205906,8310432" --date 2025-07-31

# Com diret√≥rio personalizado
python cli.py --output-dir ./relatorios_diarios daily batch --all-portfolios --date 2025-07-31
```

### üë• Relat√≥rios de Posi√ß√£o de Cotistas

#### Um Fundo Espec√≠fico
```bash
# Configura√ß√£o b√°sica (usa defaults)
python cli.py quoteholder single --portfolio 4471709 --date 2025-07-31

# Com range espec√≠fico de clientes
python cli.py quoteholder single --portfolio 4471709 --date 2025-07-31 --client-range "1000:5000"

# Para classe espec√≠fica de investidor (0 = Pessoa Jur√≠dica)
python cli.py quoteholder single --portfolio 4471709 --date 2025-07-31 --investor-class 0

# Com headers Excel habilitados
python cli.py quoteholder single --portfolio 4471709 --date 2025-07-31 --excel-headers true
```

#### Todos os Fundos (Lote)
```bash
# Todos os fundos com configura√ß√£o padr√£o
python cli.py quoteholder batch --all-portfolios --date 2025-07-31

# Todos os fundos, apenas Pessoa F√≠sica (classe 2)
python cli.py quoteholder batch --all-portfolios --date 2025-07-31 --investor-class 2

# Fundos espec√≠ficos com par√¢metros customizados
python cli.py quoteholder batch --portfolio-list "4471709,8205906" --date 2025-07-31 \
    --client-range "1:999999" \
    --investor-class -1 \
    --excel-headers true
```

### üìà Relat√≥rios de Rentabilidade Sint√©tica

#### Comando Direto (Endpoint 1048)
```bash
# Relat√≥rio para carteira espec√≠fica em PDF
daycoval profitability relatorio-rentabilidade-sintetica --carteiraId 111376 --format PDF

# Relat√≥rio para TODAS as carteiras (carteiraId omitido) em CSV
daycoval profitability relatorio-rentabilidade-sintetica --format CSVBR

# Com base di√°ria e per√≠odo espec√≠fico
daycoval profitability relatorio-rentabilidade-sintetica \
    --carteiraId 111376 \
    --format PDF \
    --baseDiaria \
    --dataInicial 2022-10-03 \
    --dataFinal 2022-10-07 \
    --tipoRentabilidadeIndice 0
```

#### Comando Simplificado
```bash
# Usando comando 'synthetic' (mais amig√°vel)
daycoval profitability synthetic 111376 --format PDF --daily-base \
    --start-date 2022-10-03 --end-date 2022-10-07

# Todas as carteiras
daycoval profitability synthetic --all-portfolios --format CSVBR
```

#### Par√¢metros Dispon√≠veis (Endpoint 1048)

| Par√¢metro | Tipo | Obrigat√≥rio | Descri√ß√£o | Valores |
|-----------|------|-------------|-----------|---------|
| `--carteiraId` | Integer | ‚ùå | C√≥digo da carteira | Se omitido: todas as carteiras |
| `--format` | String | ‚úÖ | Formato do relat√≥rio | PDF, CSVBR, CSVUS, TXTBR, TXTUS |
| `--baseDiaria` | Boolean | ‚ùå | Base di√°ria | Default: false |
| `--dataInicial` | String | Condicional* | Data inicial | YYYY-MM-DD |
| `--dataFinal` | String | Condicional* | Data final | YYYY-MM-DD |
| `--nomeRelatorioEsquerda` | Boolean | ‚ùå | Nome relat√≥rio √† esquerda | Default: true |
| `--omiteLogotipo` | Boolean | ‚ùå | Omitir logotipo | Default: false |
| `--usaNomeCurtoCarteira` | Boolean | ‚ùå | Nome curto da carteira | Default: false |
| `--tipoRentabilidadeIndice` | Integer | ‚ùå | Tipo de rentabilidade | 0, 1 ou 2 (default: 0) |
| `--emitirPosicaoDeD0Abertura` | Boolean | ‚ùå | Emitir posi√ß√£o D0 | Default: false |

*\*Obrigat√≥rio se `--baseDiaria` for true*

### üîß Comandos Utilit√°rios

```bash
# Listar todos os fundos dispon√≠veis
python cli.py list portfolios

# Listar classes de investidor dispon√≠veis
python cli.py list investor-classes

# Ver ajuda completa
python cli.py --help

# Ver ajuda de um comando espec√≠fico
python cli.py quoteholder single --help
```

## ‚öôÔ∏è Par√¢metros Avan√ßados

### Op√ß√µes Globais (Aplicam-se a Todos os Comandos)

| Par√¢metro | Padr√£o | Descri√ß√£o |
|-----------|--------|-----------|
| `--format` | `PDF` | Formato: `PDF`, `CSVBR`, `CSVUS`, `TXTBR`, `TXTUS`, `JSON` |
| `--output-dir` | `./reports` | Diret√≥rio onde salvar os arquivos |
| `--config` | `portfolios.json` | Arquivo de configura√ß√£o |
| `--verbose` | Desabilitado | Logs detalhados |

### Par√¢metros Espec√≠ficos - Relat√≥rios de Cotistas

| Par√¢metro | Tipo | Descri√ß√£o | Exemplo |
|-----------|------|-----------|---------|
| `--client-range` | String | Range de clientes | `"1000:5000"` |
| `--advisor-range` | String | Range de assessores | `"1:999"` |
| `--advisor2-range` | String | Range de assessores 2 | `"0:0"` |
| `--investor-class` | Integer | Classe de investidor (-1 a 21) | `-1` (Todos) |
| `--show-if-code` | Boolean | Mostrar c√≥digo IF | `true`/`false` |
| `--excel-headers` | Boolean | Headers formato Excel | `true`/`false` |
| `--message` | String | Mensagem personalizada | `"Relat√≥rio mensal"` |

### Classes de Investidor

| C√≥digo | Descri√ß√£o |
|--------|-----------|
| `-1` | **Todos** (recomendado para uso geral) |
| `0` | PJU - Pessoa Jur√≠dica |
| `1` | PRI - Private |
| `2` | VAR - Varejo |
| `3` | FAC - Fundos em Cotas |
| `4` | PCO - Por Conta e Ordem |
| `5` | INS - Institucional |
| ... | (21 classes no total - use `python cli.py list investor-classes`) |

## üí° Exemplos Pr√°ticos

### Cen√°rio 1: Relat√≥rio Di√°rio de Todos os Fundos
```bash
# Gerar PDFs de carteira di√°ria para todos os 95 fundos
python cli.py daily batch --all-portfolios --date 2025-07-31

# Resultado: 95 arquivos PDF em ./reports/
# Formato: CATALISE_FIC_FIDC_RL_20250731.pdf
```

### Cen√°rio 2: Relat√≥rio de Cotistas com Filtros
```bash
# Apenas investidores pessoa f√≠sica (classe 2) em formato CSV
python cli.py --format CSVBR quoteholder batch --all-portfolios --date 2025-07-31 --investor-class 2

# Resultado: 95 arquivos CSV com apenas cotistas pessoa f√≠sica
# Formato: POSICAO_COTISTAS_CATALISE_FIC_FIDC_RL_20250731.csv
```

### Cen√°rio 3: An√°lise de Fundo Espec√≠fico
```bash
# Relat√≥rio completo de um fundo (carteira + cotistas)
python cli.py daily single --portfolio 4471709 --date 2025-07-31
python cli.py quoteholder single --portfolio 4471709 --date 2025-07-31

# Resultado: 2 arquivos PDF com vis√£o completa do fundo
```

### Cen√°rio 4: Relat√≥rio Regulat√≥rio
```bash
# Cotistas institucionais (classe 5) com headers Excel
python cli.py quoteholder batch --all-portfolios --date 2025-07-31 \
    --investor-class 5 \
    --excel-headers true \
    --message "Relat√≥rio CVM mensal"
```

### Cen√°rio 5: An√°lise de Rentabilidade Sint√©tica
```bash
# Relat√≥rio de performance de todas as carteiras em CSV
daycoval profitability relatorio-rentabilidade-sintetica --format CSVBR

# Resultado: 1 arquivo CSV consolidado com dados de todas as carteiras
# Formato: RENTABILIDADE_SINTETICA_TODAS_CARTEIRAS_YYYYMMDD.csv
```

### Cen√°rio 6: Acompanhamento Peri√≥dico de Performance
```bash
# Rentabilidade sint√©tica com base di√°ria para per√≠odo espec√≠fico
daycoval profitability relatorio-rentabilidade-sintetica \
    --carteiraId 111376 \
    --format PDF \
    --baseDiaria \
    --dataInicial 2025-07-01 \
    --dataFinal 2025-07-31 \
    --tipoRentabilidadeIndice 1

# Resultado: PDF com an√°lise detalhada de performance no per√≠odo
```

## üõ†Ô∏è Solu√ß√£o de Problemas

### Erro: "No module named 'utils'"
```bash
# Problema: Caminho do m√≥dulo utils
# Solu√ß√£o: Verificar se utils/ est√° no diret√≥rio correto
# Ou executar de: C:\Users\atrindade\catalise\DataAnalytics\
```

### Erro: "Invalid URL 'None/report/reports/32'"
```bash
# Problema: BASE_URL n√£o definida no api.py
# Solu√ß√£o: Verificar se BASE_URL = "https://apigw.daycoval.com.br/custodia"
```

### Erro: "unrecognized arguments: --format"
```bash
# Problema: Ordem incorreta dos argumentos
# ‚ùå Errado: python cli.py quoteholder --format PDF batch
# ‚úÖ Correto: python cli.py --format PDF quoteholder batch
```

### Rate Limiting (429 Too Many Requests)
```bash
# O sistema tem rate limiting autom√°tico
# Se persistir, ajustar em portfolios.json:
# "rate_limit": { "max_calls": 20, "period_seconds": 60 }
```

### Arquivos N√£o Gerados
```bash
# Verificar permiss√µes do diret√≥rio
# Usar --verbose para logs detalhados
python cli.py --verbose daily single --portfolio 4471709 --date 2025-07-31
```

## üìÅ Estrutura dos Arquivos Gerados

### Nomenclatura Autom√°tica

**Relat√≥rios Di√°rios:**
```
NOME_DO_FUNDO_YYYYMMDD.extensao
Exemplo: CATALISE_FIC_FIDC_RL_20250731.pdf
```

**Relat√≥rios de Cotistas:**
```
POSICAO_COTISTAS_NOME_DO_FUNDO_YYYYMMDD.extensao
Exemplo: POSICAO_COTISTAS_CATALISE_FIC_FIDC_RL_20250731.pdf
```

### Organiza√ß√£o Sugerida
```
reports/
‚îú‚îÄ‚îÄ daily/                   # Relat√≥rios de carteira di√°ria
‚îÇ   ‚îú‚îÄ‚îÄ 2025-07-31/
‚îÇ   ‚îî‚îÄ‚îÄ 2025-08-01/
‚îú‚îÄ‚îÄ quoteholders/            # Relat√≥rios de cotistas
‚îÇ   ‚îú‚îÄ‚îÄ 2025-07-31/
‚îÇ   ‚îî‚îÄ‚îÄ 2025-08-01/
‚îî‚îÄ‚îÄ logs/                    # Logs do sistema
```

## üöÄ Scripts de Automa√ß√£o

### Script Di√°rio (Bash/PowerShell)
```bash
#!/bin/bash
# Gerar relat√≥rios di√°rios automaticamente
DATE=$(date +%Y-%m-%d)

echo "Gerando relat√≥rios para $DATE..."

# Relat√≥rios de carteira
python cli.py daily batch --all-portfolios --date "$DATE" --output-dir "./reports/daily/$DATE"

# Relat√≥rios de cotistas
python cli.py quoteholder batch --all-portfolios --date "$DATE" --output-dir "./reports/quoteholders/$DATE"

echo "Conclu√≠do!"
```

### Agendamento (Windows Task Scheduler)
```
Programa: python
Argumentos: cli.py daily batch --all-portfolios --date 2025-07-31
Diret√≥rio: C:\caminho\para\daycoval\
Hor√°rio: 08:00 (ap√≥s fechamento do D-1)
```

## üìû Suporte

Para d√∫vidas ou problemas:

1. **Verificar logs**: Usar `--verbose` para informa√ß√µes detalhadas
2. **Consultar este README**: Exemplos e solu√ß√µes comuns
3. **Testar conectividade**: `python cli.py list portfolios`
4. **Validar configura√ß√£o**: `python setup.py`

---

**Vers√£o:** 2.1  
**√öltima atualiza√ß√£o:** 02/09/2025  
**Endpoints suportados:** 32 (Carteira Di√°ria), 45 (Posi√ß√£o de Cotistas), 1048 (Rentabilidade Sint√©tica)  
**Fundos configurados:** 95

